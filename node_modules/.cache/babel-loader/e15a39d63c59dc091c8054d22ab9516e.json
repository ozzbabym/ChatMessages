{"ast":null,"code":"import axios from \"axios\";\nlet ADD_USERS = 'ADD_USERS';\nlet SET_USERS = 'SET_USERS';\nconst initialState = {\n  users: [{\n    id: 1\n  }]\n};\nexport const reducerHeader = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_USERS:\n      {\n        let login = state.users.map(login => login.login);\n\n        for (let i = 0; i < login.length; i++) {\n          if (action.login === login[i]) {\n            return state;\n          }\n        }\n\n        if (action.pass.length < 6) {\n          return state;\n        }\n\n        let newUsers = {\n          _id: 3,\n          login: action.login,\n          pass: action.pass,\n          isAuth: false\n        };\n        return { ...state,\n          users: [...state.users, newUsers]\n        };\n      }\n\n    case SET_USERS:\n      {\n        return { ...state,\n          users: [...state.users, action.usersServ]\n        };\n      }\n\n    default:\n      return state;\n  }\n};\nexport const addUsers = (login, pass) => ({\n  type: ADD_USERS,\n  login,\n  pass\n});\nexport const setUsers = usersServ => ({\n  type: SET_USERS,\n  usersServ\n});\nexport const getUsersThunk = () => {\n  return dispatch => {\n    axios.get('http://localhost:4000/api/users').then(user => {\n      let users = user.data;\n\n      for (let i = 0; i < users.length; i++) {\n        dispatch(setUsers(users[i]));\n      }\n    });\n  };\n};\nexport const setUsersThunk = text => {\n  return dispatch => {\n    let users = {\n      login: text.login,\n      pass: text.pass,\n      isAuth: false\n    };\n    axios.post('http://localhost:4000/api/users', users);\n  };\n};","map":{"version":3,"sources":["/Users/ivannazarov/Documents/reactApp/ServerAndMessage/message/src/components/Header/reducerHeader.js"],"names":["axios","ADD_USERS","SET_USERS","initialState","users","id","reducerHeader","state","action","type","login","map","i","length","pass","newUsers","_id","isAuth","usersServ","addUsers","setUsers","getUsersThunk","dispatch","get","then","user","data","setUsersThunk","text","post"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,SAAS,GAAG,WAAhB;AACA,IAAIC,SAAS,GAAG,WAAhB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAC,CACN;AAACC,IAAAA,EAAE,EAAE;AAAL,GADM;AADW,CAArB;AAQA,OAAO,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAE3D,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,SAAL;AAAgB;AAEZ,YAAIS,KAAK,GAAGH,KAAK,CAACH,KAAN,CAAYO,GAAZ,CAAgBD,KAAK,IAAEA,KAAK,CAACA,KAA7B,CAAZ;;AAEA,aAAK,IAAIE,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACF,KAAK,CAACG,MAAtB,EAA8BD,CAAC,EAA/B,EAAkC;AAE9B,cAAGJ,MAAM,CAACE,KAAP,KAAeA,KAAK,CAACE,CAAD,CAAvB,EAA2B;AAEvB,mBAAOL,KAAP;AACH;AACJ;;AAED,YAAIC,MAAM,CAACM,IAAP,CAAYD,MAAZ,GAAmB,CAAvB,EAA0B;AACtB,iBAAON,KAAP;AACH;;AAGD,YAAIQ,QAAQ,GAAC;AACTC,UAAAA,GAAG,EAAE,CADI;AAETN,UAAAA,KAAK,EAAEF,MAAM,CAACE,KAFL;AAGTI,UAAAA,IAAI,EAAEN,MAAM,CAACM,IAHJ;AAITG,UAAAA,MAAM,EAAE;AAJC,SAAb;AAQA,eAAO,EAAC,GAAGV,KAAJ;AAAWH,UAAAA,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACH,KAAV,EAAiBW,QAAjB;AAAlB,SAAP;AACH;;AAED,SAAKb,SAAL;AAAe;AACX,eAAO,EAAC,GAAGK,KAAJ;AAAWH,UAAAA,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACH,KAAV,EAAiBI,MAAM,CAACU,SAAxB;AAAlB,SAAP;AACH;;AAED;AACI,aAAOX,KAAP;AAlCR;AAoCH,CAtCM;AAwCP,OAAO,MAAMY,QAAQ,GAAG,CAACT,KAAD,EAASI,IAAT,MAAkB;AAACL,EAAAA,IAAI,EAAER,SAAP;AAAkBS,EAAAA,KAAlB;AAAyBI,EAAAA;AAAzB,CAAlB,CAAjB;AACP,OAAO,MAAMM,QAAQ,GAAIF,SAAD,KAAe;AAACT,EAAAA,IAAI,EAAEP,SAAP;AAAmBgB,EAAAA;AAAnB,CAAf,CAAjB;AAEP,OAAO,MAAMG,aAAa,GAAC,MAAI;AAC3B,SAAQC,QAAD,IAAY;AACftB,IAAAA,KAAK,CAACuB,GAAN,CAAU,iCAAV,EAA6CC,IAA7C,CAAkDC,IAAI,IAAE;AACpD,UAAIrB,KAAK,GAAGqB,IAAI,CAACC,IAAjB;;AACA,WAAI,IAAId,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACR,KAAK,CAACS,MAArB,EAA4BD,CAAC,EAA7B,EAAgC;AAE5BU,QAAAA,QAAQ,CAACF,QAAQ,CAAChB,KAAK,CAACQ,CAAD,CAAN,CAAT,CAAR;AACH;AAEJ,KAPD;AAQH,GATD;AAUH,CAXM;AAaP,OAAO,MAAMe,aAAa,GAAGC,IAAD,IAAQ;AAChC,SAAON,QAAD,IAAY;AACd,QAAIlB,KAAK,GAAG;AAACM,MAAAA,KAAK,EAAEkB,IAAI,CAAClB,KAAb;AAAoBI,MAAAA,IAAI,EAAEc,IAAI,CAACd,IAA/B;AAAqCG,MAAAA,MAAM,EAAE;AAA7C,KAAZ;AACAjB,IAAAA,KAAK,CAAC6B,IAAN,CAAW,iCAAX,EAA8CzB,KAA9C;AACH,GAHD;AAIH,CALM","sourcesContent":["import axios from \"axios\"\n\nlet ADD_USERS = 'ADD_USERS'\nlet SET_USERS = 'SET_USERS'\n\nconst initialState = {\n    users:[\n    {id: 1}\n    \n    ]\n}\n\n\nexport const reducerHeader = (state = initialState, action) => {\n    \n    switch (action.type){\n        case ADD_USERS: {\n\n            let login = state.users.map(login=>login.login)\n            \n            for (let i=0; i<login.length; i++){\n                \n                if(action.login===login[i]){\n                    \n                    return state\n                }\n            }\n\n            if (action.pass.length<6) {\n                return state\n            }\n            \n\n            let newUsers={\n                _id: 3,\n                login: action.login,\n                pass: action.pass,\n                isAuth: false\n                \n            }\n\n            return {...state, users: [...state.users, newUsers]}\n        }\n\n        case SET_USERS:{\n            return {...state, users: [...state.users, action.usersServ]}\n        }\n\n        default:\n            return state\n    }\n}\n\nexport const addUsers = (login , pass) =>({type: ADD_USERS, login, pass })\nexport const setUsers = (usersServ)=> ({type: SET_USERS , usersServ})\n\nexport const getUsersThunk=()=>{\n    return (dispatch)=>{\n        axios.get('http://localhost:4000/api/users').then(user=>{\n            let users = user.data\n            for(let i=0; i<users.length;i++){\n                \n                dispatch(setUsers(users[i]))\n            }\n            \n        })\n    }\n}\n\nexport const setUsersThunk =(text)=>{\n    return(dispatch)=>{\n        let users = {login: text.login, pass: text.pass, isAuth: false}\n        axios.post('http://localhost:4000/api/users', users)\n    }\n}\n"]},"metadata":{},"sourceType":"module"}